% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_conditional_prob.R
\name{calc_propens_agents}
\alias{calc_propens_agents}
\title{Calculating the conditional propensity to have an attribute based on conditional variables}
\usage{
calc_propens_agents(
  dataframe,
  variable,
  total_population,
  agent_df,
  list_conditional_var
)
}
\arguments{
\item{dataframe}{stratified dataframe which includes all combinations of the conditional variables (the ones based on which we want to calculate the propensity)}

\item{variable}{the number of people with the variable class for which we want to calculate the propensity}

\item{total_population}{the total number of people within the combination of conditional variables}

\item{agent_df}{agent dataset, the full dataset of individual agents that was previously created and that contains the conditional variables}

\item{list_conditional_var}{list of conditional variables, the variables on which basis the propensity to have an attribute should be created}
}
\value{
The output is the agent dataframe with an additional column of their propensity/probability to have the respective property/attribute.
}
\description{
This is a function to calculate the probability/propensity to have a specific class of a variable conditional on other variables. It requires a stratified dataframe (@dataframe) which includes all combinations of the conditional variables (the ones based on which we want to calculate the propensity), the number of people with the variable class (@variable) for which we want to calculate the propensity, and the total number of people within the combination of conditional variables (@total_population). The function calculates the propensity to have a specific class based on the conditional variables, by dividing the number of people with the class if interest by the total number of people within the combination of conditional variables. Further, the function joins these probabilities with the agent dataset (@agent_df) based on the list of conditional variables (@list_conditional_var). This requires the variable/column names of the conditional variables to be equal for the stratified and the agent dataframe. Finally, it shuffles the agent dataset to avoid biases due to a non random order in the next steps.
}
\section{Example Input- Output Tables (random numbers)}{
\subsection{Stratified dataframe (input)}{\tabular{ccccc}{
   age_group \tab sex \tab employed \tab un-employed \tab total \cr
   A1 \tab male \tab 25 \tab 133 \tab 158 \cr
   A2 \tab male \tab 132 \tab 323 \tab 455 \cr
   A3 \tab male \tab 122 \tab 360 \tab 482 \cr
   A1 \tab female \tab 175 \tab 389 \tab 564 \cr
   A2 \tab female \tab 275 \tab 206 \tab 481 \cr
   A3 \tab female \tab 394 \tab 25 \tab 419 \cr
   A1 \tab non-binary \tab 196 \tab 203 \tab 399 \cr
   A2 \tab non-binary \tab 248 \tab 270 \tab 518 \cr
   A3 \tab non-binary \tab 137 \tab 34 \tab 171 \cr
}

}

\subsection{agent dataframe (input)}{\tabular{ccc}{
   agent_id \tab age_group \tab sex \cr
   Agent_1 \tab A1 \tab male \cr
   Agent_2 \tab A3 \tab male \cr
   Agent_3 \tab A3 \tab non-binary \cr
   Agent_4 \tab A1 \tab female \cr
   Agent_5 \tab A4 \tab male \cr
   Agent_6 \tab A1 \tab female \cr
   Agent_7 \tab A4 \tab non-binary \cr
   Agent_8 \tab A3 \tab male \cr
   Agent_9 \tab A3 \tab male \cr
   Agent_10 \tab A3 \tab male \cr
   Agent_11 \tab A3 \tab non-binary \cr
   Agent_12 \tab A4 \tab non-binary \cr
   Agent_13 \tab A4 \tab non-binary \cr
   Agent_14 \tab A4 \tab female \cr
   Agent_15 \tab A2 \tab non-binary \cr
   (...) \tab  \tab  \cr
}

}

\subsection{agent dataframe with conditional propensity to have class of interest (here employed)}{\tabular{cccc}{
   agent_id \tab age_group \tab sex \tab prop_employed \cr
   Agent_91 \tab A2 \tab male \tab 0.66781411 \cr
   Agent_483 \tab A3 \tab female \tab 0.4893964 \cr
   Agent_418 \tab A1 \tab non-binary \tab 0.45307918 \cr
   Agent_124 \tab A1 \tab male \tab 0.64898990 \cr
   Agent_388 \tab A1 \tab female \tab 0.56937799 \cr
   Agent_406 \tab A1 \tab male \tab 0.64898990 \cr
   Agent_447 \tab A3 \tab male \tab 0.48939641 \cr
   Agent_459 \tab A1 \tab female \tab 0.56937799 \cr
   Agent_328 \tab A1 \tab female \tab 0.56937799 \cr
   Agent_223 \tab A1 \tab non-binary \tab 0.45307918 \cr
   (...) \tab  \tab  \tab  \cr
}

\subsection{* if you have more than two classes of a variable then apply the same function to the same datasets multiple times for the different classes of the variable. E.g., if you have "low_education", "middle_education", "high_eduction", just apply it for all of them.}{
}

}
}

\examples{
## generating some example mock data ##
# stratified dataframe mock data
age_group = rep(c("A1", "A2", "A3", "A4"),3)
sex = rep(c("male", "female", "non-binary"), each = 4)
employed = sample(1:400,length(age_group))
unemployed = sample(1:400,length(age_group))
total_pop = employed + unemployed
stratified_df = data.frame(age_group, sex , employed, unemployed, total_pop)

# agent dataframe mock data
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
agent_df$age_group = age_group[sample(1:length(age_group), size = nrow(agent_df), replace = T)]
agent_df$sex = sex[sample(1:length(age_group), size = nrow(agent_df), replace = T)]
colnames(agent_df) = c("agent_id",  "age_group", "sex" )
print(agent_df)

# function application
agent_df = calc_propens_agents(stratified_df, "employed", "total_pop", agent_df, c("age_group", "sex"))
print(agent_df$prop_employed)
print(agent_df)

}
