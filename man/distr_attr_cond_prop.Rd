% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distr_attributes.R
\name{distr_attr_cond_prop}
\alias{distr_attr_cond_prop}
\title{Assigning Attributes purely based on conditional probabilities}
\usage{
distr_attr_cond_prop(
  agent_df,
  variable,
  list_agent_propens,
  list_class_names,
  agent_exclude
)
}
\arguments{
\item{agent_df}{Dataframe of the unique agents with their attributes}

\item{variable}{the new variable that we want to add based on the stratified and neighborhood marginal distributions}

\item{list_agent_propens}{A list of the columns in the agent dataset that contain the propensities for the classes of the variable based on the other agents conditional attributes. This list has to be in the same order as the list_var_classes_neigh_df. We can leave out the last propensity as it is 1 minus the other propensities.}

\item{list_class_names}{The list_class_names is optional and contains the values that the new created agent variable should have for the different variable classes. It has to be in the same order and of the same length as the list_var_classes_neigh_df. If left empty, the list_var_classes_neigh_df will become the default values for the classes.}

\item{agent_exclude}{an optional variable containing one or multiple variable names of the agent dataset on which basis agents should be excluded from the attribute assignment. These variables whould be binary columns, with 1 indicating that it should be excluded (e.g. "is_child" could be entered if agents with is_child = 1 should be exluded for the new attribute).}
}
\value{
Returns the Agent dataframe with the new assigned attribute and the random score used for the assignment.
}
\description{
Sometimes there are no marginal distributions for the neighborhood available for certain variable that we want to join to the agent dataframe. For these cases this function can be used to assign variables solely based on the conditional propensities (the likelihood to have a certain attribute because of other attributes). Conditional propensity does not require causal direction, but can be purely based on statistical correlation in a place for a group of people.
}
\examples{
## generating some example mock data (based on random numbers)
### agent dataframe mock data ###
agent_df = as.data.frame(paste("Agent_",1:500, sep=""))
agent_df$neigh_ID = sample(1:10, size =nrow(agent_df), replace = T)
agent_df$age_group = c("A1", "A2", "A3", "A4")[sample(1:4, size = nrow(agent_df), replace = T)]
agent_df$sex = c("female", "male", "non-binary")[sample(1:3, size = nrow(agent_df), replace = T)]
# the propensity variable this should be the ouput of the "calc_propens_agents" function or the "strat_prop_from_sep_cond_var" if no multi-joint distributions of conditional variable are available and only single conditional variable joint distributions.
# for illustration purposes it is only a random probability here
agent_df$prop_employed = sample(x= seq(from= 0, to = 0.75, by= 0.01), size = nrow(agent_df), replace = T)
agent_df$prop_pension = sample(x= seq(from= 0, to = 0.25, by= 0.01), size = nrow(agent_df), replace = T)
agent_df$prop_unemployed = 1-(agent_df$prop_employed + agent_df$prop_pension)
colnames(agent_df) = c("agent_id", "neigh_ID", "age_group", "sex", "prop_employed", "prop_pension")
print(agent_df)

# function application (without excluding a subset of the population from attribute assignment)
agent_df_new = distr_attr_cond_prop(agent_df = agent_df, variable = "employ_status", list_agent_propens = c("prop_employed", "prop_pension", "prop_unemployed"), list_class_names = c("employed", "pensioned", "unemployed"))
print(agent_df_new)

## applying the function (with agent_exclude param)
# say we want to exclude people from age_group A1, we need to create a binary variable that indicates if an agent belongs to that group
agent_df$is_child = 0
agent_df$is_child[agent_df$age_group == "A1"] = 1
agent_df_new = distr_attr_cond_prop(agent_df = agent_df, variable = "employ_status", list_agent_propens = c("prop_employed", "prop_pension", "prop_unemployed"), list_class_names = c("employed", "pensioned", "unemployed"), agent_exclude = "is_child")
print(agent_df_new)

}
