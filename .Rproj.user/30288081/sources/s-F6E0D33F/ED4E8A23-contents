install.packages("XML")
library("XML")
setwd("D:/")
x = read.gml(, as = "srt", directed = TRUE, coords = TRUE)
x = st_read("bgt_wegdeel.xml")
pedway = x[which(x$function. %in% c("voetpad", "voetgangersgebied")),]
pedway_sp = SpatialPolygonsDataFrame(pedway$geometry, pedway)
pedway_sp = pedway$geometry
?SpatialPolygonsDataFrame
pedway_sp = as_Spatial(pedway_sp, cast = TRUE, IDs = pedway$gml_id)
?as_Spatial
saveXML(pedway, file="pedway.xml")
file.show("out.xml")
st_write(obj= pedway, driver= "ESRI Shapefile", dsn="C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", layer= "pedway.shp")


setwd("C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/parking")
library(sp)
library(rgdal)

install.packages("DescTools")
file_js = fromJSON(file = "tarieven_orig.json")
x = read.delim("parkingtarifs.txt")
?fromJSON
x = data.frcolnames(joint)
ame(file_js)

disagg = file_js %>% spread_all
file_js %>% gather_object %>% json_types %>% count(name, type)
dissagg2 = file_js %>% enter_object(tarieven) %>% gather_array

disagg3 = file_js %>% enter_object(location) %>% enter_object(coordinates)

joint = cbind(disagg, dissagg2, disagg3)
colnames(jointremove) = c("document.id","description.0", "location.type", "fullJSON" ,"document.id" ,"array.index","tariff","document.id","coordinates")
clean = joint[c("description.0", "location.type", "tariff", "coordinates" )]
remove(disagg, disagg3, dissagg2, joint)
data2 = read.csv("convertcsv.csv")
clean$ID = data2$X_key
remove(file_js)
clean = clean[,c("ID", "description.0", "tariff", "location.type", "coordinates" )]
write.csv(clean, "parkingtarifs.csv")
remove(x)
clean_sp = SpatialPolygonsDataFrame(clean$coordinates, clean[,c("ID", "description.0", "tariff", "location.type")])
x = Polygon(x)

pol1 = Polygon(t(as.data.frame(clean$coordinates[[1]][[1]])))
polys= SpatialPolygons(list(Polygons(list(pol1), ID = "1")))


for (i in 2:30){
  if(clean$location.type[i] == "Polygon"){
    geom = Polygons(list(Polygon(t(as.data.frame(clean$coordinates[[i]][[1]])))), ID = i) 
  }
  else{
    superpoly = Polygons(list(Polygon(t(as.data.frame(clean$coordinates[[i]][[1]][[1]])))), i) 
    if(length(clean$coordinates[[i]][[1]])>1){
      for(x in 2:length(clean$coordinates[[i]][[1]])){
        subpoly = Polygon(t(as.data.frame(clean$coordinates[[i]][[1]][[x]]))) 
        superpoly= Polygons(c(superpoly@Polygons, subpoly), ID =  i)
      }
    }
    geom = superpoly
  }
  polys= SpatialPolygons(c(polys@polygons, geom))
}
clean$coordinates[[4]][[1]]

length(clean$coordinates[[3]][[1]])
superpoly = Polygons(list(Polygon(t(as.data.frame(clean$coordinates[[3]][[1]][[1]])))), paste(as.character(i),".1", sep = "")) 

parkingtarifs = SpatialPolygonsDataFrame(polys, clean[,c("ID", "description.0", "location.type", "period","price" ,"monsat","monfri",
                                                         "monsun","sun","satsun","monwed","thur", "fri","sat")])                     

clean$period = ""
clean$price = ""
colnames(clean)
clean$monsat = ""
clean$monfri = ""
clean$monsun = ""
clean$sun = ""
clean$satsun = ""
clean$monwed = ""
clean$thur = ""
clean$fri =""
clean$sat = ""

for(i in 1:30){
  indx = StrPos(clean$period[i],"ma-za", pos = 1)
    if(!is.na(indx)){
      clean$monsat[i] = substr(clean$period[i],indx-12,indx-3)
    }
  indx = StrPos(clean$period[i],"ma-vrij", pos = 1)
  if(!is.na(indx)){
    clean$monfri[i] = substr(clean$period[i],indx-12,indx-3)
  }
  indx = StrPos(clean$period[i],"ma-zo", pos = 1)
  if(!is.na(indx)){
    clean$monsun[i] = substr(clean$period[i],indx-12,indx-3)
  }
  indx = StrPos(clean$period[i],"\"zo", pos = 1)
  if(!is.na(indx)){
    clean$sun[i] = substr(clean$period[i],indx-11,indx-2)
  }
  indx = StrPos(clean$period[i], "za,zo", pos = 1)
  if(!is.na(indx)){
    clean$satsun[i] = substr(clean$period[i],indx-12,indx-3)
  }
  indx = StrPos(clean$period[i],"ma-wo,vrij,za", pos = 1)
  if(!is.na(indx)){
    clean$monwed[i] = substr(clean$period[i],indx-12,indx-3)
    clean$fri[i] = substr(clean$period[i],indx-12,indx-3)
    clean$sat[i] = substr(clean$period[i],indx-12,indx-3)
  }
  indx = StrPos(clean$period[i], "do", pos = 1)
  if(!is.na(indx)){
    clean$thur[i] = substr(clean$period[i],indx-12,indx-3)
  }
}







as.character(clean$tariff[[1]])
clean$price = as.character(clean$tariff)
for(i in 1:30){
  clean$price[i] = substr(clean$price[i],7,10)
  
}
gsub("list(","", clean$period[i])

writeOGR(parkingtarifs, dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/parking", "parkingtarifs", driver = "ESRI Shapefile")
sub("list(","", as.character(clean$period[i]))
?writeOGR
StrPos(x, pattern, pos = 1, ...)

?readOGR
library(sf)
library(rgdal)
library(lwgeom)
install.packages("lwgeom")
perpenlines = readOGR(dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", layer = "ped_perpendiclines")
perpenlinessf <- st_as_sfc(perpenlines)

roads = readOGR(dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", layer = "Pedestrian Network_Amsterdam")
roadssf <- st_as_sfc(roads)

road_union = st_combine(roadssf)
roads_union_sp = as_Spatial(road_union)
length(roads_union_sp)

roads_union_2 = Line(road_union)
roads_union_sp = Lines(road_union)
?Line
st_write(road_union, dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", "ped_roads_dissolved", driver = "ESRI Shapefile")

roads_union_sp@lines[[1]]

rep("1", length(roads_union_sp@lines))
roads_union_sp = SpatialLinesDataFrame(roads_union_sp, data = rep("1", length(roads_union_sp@lines)), match.ID = FALSE)
inter <- st_intersects(st_as_sf(roadssf),st_as_sf(roadssf), sparse = TRUE)
roads_clean <- roads[lengths(inter)>2,]
writeOGR(as_Spatial(road_union), dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", "ped_roads_dissolved", driver = "ESRI Shapefile")

lengths(inter)>1

sidewalkoutline = readOGR(dsn = "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam/Built Environment/Transport Infrastructure/pedestrian", layer = "BGT_pedway_polygons_aslines")
sidewalkoutlinesf <- st_as_sfc(sidewalkoutline)

split_road = st_split(roadssf, sidewalkoutlinesf)


split_perpenlines <- st_difference(perpenlinessf, st_intersection(perpenlinessf,sidewalkoutlinesf))

split_perpenlines = st_split(perpenlinessf, sidewalkoutlinesf)
