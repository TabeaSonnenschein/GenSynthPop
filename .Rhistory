table(ODIN$mode_name)
ODIN$modes_simple = ""
ODIN$modes_simple[ODIN$mode_name %in% c("Personenauto", "Bestelauto", "Vrachtwagen", "Landbouwvoertuig", "Gehandicaptenvervoermiddel met motor")] = "car"
ODIN$modes_simple[ODIN$mode_name %in% c("Trein", "Bus", "Tram", "Metro")] = "publicTransport"
ODIN$modes_simple[ODIN$mode_name %in% c("Elektrische fiets","Niet-elektrische fiets")] = "bike"
ODIN$modes_simple[ODIN$mode_name %in% c("Te voet", "Gehandicaptenvervoermiddel zonder motor", "Anders zonder motor")] = "walk"
ODIN$modes_simple[ODIN$mode_name %in% c("Snorfiets", "Bromfiets")] = "scooter"
simple_mode_names = unique(ODIN$modes_simple)
ODIN$WalkTrip = 0
ODIN$WalkTrip[ODIN$modes_simple == "walk"] = 1
ODIN$BikeTrip = 0
ODIN$BikeTrip[ODIN$modes_simple == "bike"] = 1
ODIN$CarTrip = 0
ODIN$CarTrip[ODIN$modes_simple == "car"] = 1
ODIN$PubTransTrip = 0
ODIN$PubTransTrip[ODIN$modes_simple == "car"] = 1
View(ODIN)
ODIN$PubTransTrip = 0
ODIN$PubTransTrip[ODIN$modes_simple == "publicTransport"] = 1
ODIN_orig = base::merge(ODIN, orig_vardata, by.x = "orig_PC6", by.y = "PC6")
ODIN_orig_dest = base::merge(ODIN_orig, dest_vardata, by.x = "dest_PC6", by.y = "PC6")
ODIN_orig_dest[,route_variables_later] = NA
for(x in 1:nrow(ODIN)){
orig_dest_line = st_as_sf(SpatialLines(list(Lines(Line(list(as.numeric(ODIN_orig_dest[x,c("coords.x1.orig","coords.x1.dest")]), as.numeric(ODIN_orig_dest[x,c("coords.x2.orig","coords.x2.dest")]))), ID = ODIN_orig_dest$TripID[x])), proj4string = CRS(crs)))
route_stats = st_intersection(orig_dest_line, PC6_polygonsf) %>%
st_drop_geometry() %>%
select(route_variables)
route_stats <- sapply(route_stats, as.numeric )
ODIN_orig_dest[x,route_variables_later] = colMeans(route_stats, na.rm = T)
}
#####################################################
### Initial Regression Exploration ##################
#####################################################
walk_determinants = c(colnames(dest_vardata), route_variables_later)
#####################################################
### Initial Regression Exploration ##################
#####################################################
walk_determinants = colnames(ODIN_orig_dest)
colnames(ODIN_orig_dest)
#####################################################
### Initial Regression Exploration ##################
#####################################################
walk_determinants = colnames(ODIN_orig_dest)[26:]
#####################################################
### Initial Regression Exploration ##################
#####################################################
walk_determinants = colnames(ODIN_orig_dest)[26:ncol(ODIN_orig_dest)]
walk_lm <- lm(WalkTrip ~ walk_determinants, ODIN_orig_dest)
walk_lm <- lm(ODIN_orig_dest$WalkTrip ~ ODIN_orig_dest[,walk_determinants])
walk_determinants
?lm
walk_lm <- lm(WalkTrip ~ DistCBD.orig, data = ODIN_orig_dest)
View(walk_lm)
walk_lm <- lm(WalkTrip ~ DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(walk_lm)
bike_lm <- lm(BikeTrip ~ DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(bike_lm)
car_lm <- lm(CarTrip ~ DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(car_lm)
walk_lm <- lm(WalkTrip ~ migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(walk_lm)
bike_lm <- lm(BikeTrip ~ migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(bike_lm)
car_lm <- lm(CarTrip ~ migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(car_lm)
walk_lm <- lm(WalkTrip ~ sex + age +  migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(walk_lm)
bike_lm <- lm(BikeTrip ~ sex + age + migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(bike_lm)
car_lm <- lm(CarTrip ~ sex + age + migration_background +
Nr_cars_hh +
income +
employment_status +
education_level +
HH_size +
nr_children_yonger6 +
DistCBD.orig +
pubTraDns.orig +
NrParkSpac.dest +
popDns.route +
retaiDns.route +
greenCovr.route +
pubTraDns.route +
RdIntrsDns.route +
TrafAccid.route +
AccidPedes.route +
NrTrees.route +
MeanTraffV.route +
HighwLen.route +
PedStrWidt.route +
PedStrLen.route +
LenBikRout.route +
retailDiv.route +
MaxSpeed.route +
NrStrLight.route +
CrimeIncid.route +
MaxNoisDay.route +
OpenSpace.route +
PNonWester.route +
PWelfarDep.route , data = ODIN_orig_dest)
summary(car_lm)
ODIN_orig_dest$age_group = 0
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 0:18] = 0
':18'
0:18
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 0:17] = 0
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 18:35] = 0
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 35:50] = 2
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 50:65] = 3
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 65:100] = 4
View(ODIN_orig_dest)
# data preparation for heterogenous weight calibration
ODIN_orig_dest$age_group = 0
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 0:10] = 0
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 10:17] = 1
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 18:35] = 2
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 35:50] = 3
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 50:65] = 4
ODIN_orig_dest$age_group[ODIN_orig_dest$age %in% 65:100] =5
trip_dist_weight_car_age = c(0,0,0,0,0)
trip_dist_weight_car_age[1]
st_length(orig_dest_line)
sp_length(as_Spatial(orig_dest_line))
route_stats = st_intersection(orig_dest_line, PC6_polygonsf) %>%
st_drop_geometry() %>%
select(route_variables)
route_stats = st_intersection(orig_dest_line, PC6_polygonsf)
PC6_polygon[which(PC6_polygon$PC6 == route_stats$PC6)]
plot(PC6_polygon[which(PC6_polygon$PC6 == route_stats$PC6)])
plot(PC6_polygon[which(PC6_polygon$PC6 %in% route_stats$PC6),])
plot(orig_dest_line, add = T, col = "red")
st_length(orig_dest_line)
ODIN_orig_dest[,route_variables_later] = NA
ODIN_orig_dest$trip_distance = NA
for(x in 1:nrow(ODIN)){
orig_dest_line = st_as_sf(SpatialLines(list(Lines(Line(list(as.numeric(ODIN_orig_dest[x,c("coords.x1.orig","coords.x1.dest")]), as.numeric(ODIN_orig_dest[x,c("coords.x2.orig","coords.x2.dest")]))), ID = ODIN_orig_dest$TripID[x])), proj4string = CRS(crs)))
ODIN_orig_dest$trip_distance[x] = st_length(orig_dest_line)
route_stats = st_intersection(orig_dest_line, PC6_polygonsf) %>%
st_drop_geometry() %>%
select(route_variables)
route_stats <- sapply(route_stats, as.numeric )
ODIN_orig_dest[x,route_variables_later] = colMeans(route_stats, na.rm = T)
}
route_stats = st_intersection(orig_dest_line, PC6_polygonsf)
plot(PC6_polygon[which(PC6_polygon$PC6 %in% route_stats$PC6),])
plot(orig_dest_line, add = T, col = "red")
st_length(orig_dest_line)
ODIN_orig_dest[,route_variables_later] = NA
ODIN_orig_dest$trip_distance = NA
for(x in 1:nrow(ODIN)){
orig_dest_line = st_as_sf(SpatialLines(list(Lines(Line(list(as.numeric(ODIN_orig_dest[x,c("coords.x1.orig","coords.x1.dest")]), as.numeric(ODIN_orig_dest[x,c("coords.x2.orig","coords.x2.dest")]))), ID = ODIN_orig_dest$TripID[x])), proj4string = CRS(crs)))
ODIN_orig_dest$trip_distance[x] = st_length(orig_dest_line)
route_stats = st_intersection(orig_dest_line, PC6_polygonsf) %>%
st_drop_geometry() %>%
select(route_variables)
route_stats <- sapply(route_stats, as.numeric )
ODIN_orig_dest[x,route_variables_later] = colMeans(route_stats, na.rm = T)
}
ODIN_orig_dest$driving_utility = (income_weight_car * ODIN_orig_dest$income) +
(trip_dist_weight_car_age[ODIN_orig_dest$age_group] * ODIN_orig_dest$trip_distance) +
(parking_space_weight_car * ODIN_orig_dest$NrParkSpac.dest) +
(parking_price_weight_car * ODIN_orig_dest$ParkingPrice.dest) +
(car_access_weight)
## parameters for calibration
income_weight_car = 0
trip_dist_weight_car_age = c(0,0,0,0,0)
parking_space_weight_car = 0
car_access_weight = 0
ODIN_orig_dest$driving_utility = (income_weight_car * ODIN_orig_dest$income) +
(trip_dist_weight_car_age[ODIN_orig_dest$age_group] * ODIN_orig_dest$trip_distance) +
(parking_space_weight_car * ODIN_orig_dest$NrParkSpac.dest) +
(parking_price_weight_car * ODIN_orig_dest$ParkingPrice.dest) +
(car_access_weight)
pkgs = c("maptools","rgdal","sp", "sf", "jpeg", "data.table", "purrr", "rgeos" , "leaflet", "RColorBrewer",
"ggplot2", "lattice",  "raster",  "spatialEco", "rjson", "jsonlite","EconGeo", "dplyr",
"rstan", "boot",  "concaveman", "data.tree", "DiagrammeR", "networkD3", "rgexf", "tidytree", "exactextractr", "terra")
sapply(pkgs, require, character.only = T) #load
rm(pkgs)
dataFolder= "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam"
crs = "+init=EPSG:28992" #Amersfoort / RD New
crs_name = "RDNew"
CRS_defin = "+towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725"
extent = readOGR(dsn=paste(dataFolder, "/SpatialExtent", sep = "" ),layer="Amsterdam Diemen Oude Amstel Extent")
extent = spTransform(extent, CRSobj = crs)
city = "Amsterdam"
raster_size = 200
setwd(paste(dataFolder, "/Built Environment/Transport Infrastructure", sep = ""))
walkability_grid = readOGR(dsn=getwd(),layer=paste("walkability_grid_",raster_size, sep=""))
colnames(walkability_grid@data) = c("unique_id",  "int_id", "population_density", "retail_density" ,
"green_coverage_fraction", "public_trans_density", "street_intersection_density",
"Nr_Traffic_accidents", "Nr_Traffic_Pedestrian_Accidents", "Nr_Trees",
"averageTrafficVolume", "sumTrafficVolume", "MetersMajorStreets",
"Pedestrian_Street_Width",  "Pedestrian_Streets_Length", "len_intersec_bikeroute",
"dist_CBD", "retail_diversity", "MaxSpeedLimit", "MinSpeedLimit", "MeanSpeedLimit",
"Nr_StreetLights", "crime_incidence", "max_noise_day",  "max_noise_night",
"openspace_fraction",  "Nr_ParkingSpaces", "perc_non_western", "perc_welfare_dependent")
##########################################
# Parking Prices
##########################################
ParkingPrices = readOGR(dsn=paste(dataFolder, "/Built Environment/Transport Infrastructure/parking", sep = ""),layer="parkingprices_prepostintervention")
ParkingPrices = spTransform(ParkingSpaces, CRSobj = crs)
ParkingPrices = spTransform(ParkingPrices, CRSobj = crs)
walkability_grid_centroids = gCentroid(walkability_grid, byid= T, id= walkability_grid$unique_id)
ParkingPrices_join = point.in.poly(walkability_grid_centroids, ParkingPrices)
View(PC6_polygon)
View(ParkingPrices_join)
ParkingPrices_join= ParkingPrices_join[!is.na(ParkingPrices_join$pt.ids)]
ParkingPrices_join= ParkingPrices_join[!is.na(ParkingPrices_join$pt.ids),]
walkability_grid$ParkingPrices =0
walkability_grid$ParkingPrices =0
for(x in length(walkability_grid@data$unique_id)){
walkability_grid$ParkingPrices[x] = max(ParkingPrices_join$h_cost_pre[(ParkingPrices_join$pt.ids == x)])
}
View(walkability_grid)
summary(walkability_grid$ParkingPrices)
walkability_grid$ParkingPrices =0
for(x in 1:length(walkability_grid@data$unique_id)){
walkability_grid$ParkingPrices[x] = max(ParkingPrices_join$h_cost_pre[(ParkingPrices_join$pt.ids == x)])
}
summary(walkability_grid$ParkingPrices)
walkability_grid$ParkingPrices_pre =0
for(x in 1:length(walkability_grid@data$unique_id)){
walkability_grid$ParkingPrices_pre[x] = max(ParkingPrices_join$h_cost_pre[(ParkingPrices_join$pt.ids == x)])
}
walkability_grid$ParkingPrices_pre =0
walkability_grid$ParkingPrices_post =0
for(x in 1:length(walkability_grid@data$unique_id)){
walkability_grid$ParkingPrices_pre[x] = max(ParkingPrices_join$h_cost_pre[(ParkingPrices_join$pt.ids == x)])
walkability_grid$ParkingPrices_post[x] = max(ParkingPrices_join$h_costpost[(ParkingPrices_join$pt.ids == x)])
}
summary(walkability_grid$ParkingPrices_pre)
summary(walkability_grid$ParkingPrices_post)
ggplot(data = st_as_sf(walkability_grid)) +
geom_sf(aes(fill = walkability_grid$ParkingPrices_pre), size= 0.01)+
scale_fill_viridis_c(option = "D")
ggplot(data = st_as_sf(walkability_grid)) +
geom_sf(aes(fill = walkability_grid$ParkingPrices_post), size= 0.01)+
scale_fill_viridis_c(option = "D")
walkability_grid <- walkability_grid[,!(names(walkability_grid) %in% "ParkingPrices")]
colnames(walkability_grid@data)
colnames(walkability_grid@data) = c("unique_id",  "int_id", "population_density", "retail_density" ,
"green_coverage_fraction", "public_trans_density", "street_intersection_density",
"Nr_Traffic_accidents", "Nr_Traffic_Pedestrian_Accidents", "Nr_Trees",
"averageTrafficVolume", "sumTrafficVolume", "MetersMajorStreets",
"Pedestrian_Street_Width",  "Pedestrian_Streets_Length", "len_intersec_bikeroute",
"dist_CBD", "retail_diversity", "MaxSpeedLimit", "MinSpeedLimit", "MeanSpeedLimit",
"Nr_StreetLights", "crime_incidence", "max_noise_day",  "max_noise_night",
"openspace_fraction", "Nr_ParkingSpaces", "perc_non_western", "perc_welfare_dependent",
"ParkingPrices_pre", "ParkingPrices_post")
colnames(walkability_grid@data) = c("unqId", "Intid", "popDns", "retaiDns" , "greenCovr", "pubTraDns",
"RdIntrsDns", "TrafAccid", "AccidPedes", "NrTrees", "MeanTraffV",
"SumTraffVo", "HighwLen", "PedStrWidt", "PedStrLen", "LenBikRout",
"DistCBD", "retailDiv", "MaxSpeed", "MinSpeed", "MeanSpeed", "NrStrLight",
"CrimeIncid", "MaxNoisDay", "MxNoisNigh", "OpenSpace", "NrParkSpac",
"PNonWester", "PWelfarDep", "PrkPricPre", "PrkPricPos")
writeOGR(walkability_grid, dsn=getwd() ,layer= paste("ModalChoice_determ_",raster_size, sep=""),driver="ESRI Shapefile")
writeOGR(walkability_grid, dsn=getwd() ,layer= paste("walkability_grid_",raster_size, sep=""),driver="ESRI Shapefile")
#####################################
#### Joining to PC6 spatial layer
######################################
PC6_centroids = readOGR(dsn=paste(dataFolder, "/Administrative Units", sep = ""),layer="CBS_PC6_2019_Amsterdam_centroids")
PC6_centroids_gridjoin = point.in.poly(PC6_centroids, walkability_grid)
PC6_env_behav_determ = as.data.frame(PC6_centroids_gridjoin)
write.csv(PC6_env_behav_determ, "PC6_env_behav_determ.csv", row.names = F)
PC6_polygon = readOGR(dsn=paste(dataFolder, "/Administrative Units", sep = ""),layer="CBS_PC6_2019_Amsterdam")
PC6_polygon = PC6_polygon[,c("PC6")]
PC6_polygon = merge(PC6_polygon, PC6_env_behav_determ, by = "PC6")
writeOGR(PC6_polygon, dsn=getwd() ,layer= "PC6_polygon_behav_determ",driver="ESRI Shapefile")
walkability_measures = as.data.frame(walkability_grid)
write.csv(walkability_measures, "walkability_measures.csv", row.names = F, quote=FALSE)
dataFolder= "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam"
crs = "+init=EPSG:28992" #Amersfoort / RD New
crs_name = "RDNew"
CRS_defin = "+towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725"
setwd(paste(dataFolder, "/Built Environment/Transport Infrastructure", sep = ""))
#######################################
#10 Traffic Volume
#######################################
CarStreets = readOGR(dsn=paste(dataFolder, "/Built Environment/Transport Infrastructure/cars", sep = ""),layer="Car Traffic_RDNew")
pkgs = c("maptools","raster", "rgdal","sp", "sf", "jpeg", "data.table", "purrr", "rgeos" , "leaflet", "RColorBrewer",
"ggplot2", "lattice",  "raster",  "spatialEco", "rjson", "jsonlite","EconGeo", "dplyr",
"rstan", "boot",  "concaveman", "data.tree", "DiagrammeR", "networkD3", "rgexf", "tidytree", "exactextractr", "terra")
sapply(pkgs, require, character.only = T) #load
rm(pkgs)
dataFolder= "C:/Users/Tabea/Documents/PhD EXPANSE/Data/Amsterdam"
#######################################
#10 Traffic Volume
#######################################
CarStreets = readOGR(dsn=paste(dataFolder, "/Built Environment/Transport Infrastructure/cars", sep = ""),layer="Car Traffic_RDNew")
CarStreets = spTransform(CarStreets, CRSobj = crs)
ggplot(data = st_as_sf(CarStreets)) +
geom_sf(aes(fill = CarStreets$daglv), size= 0.01)+
scale_fill_viridis_c(option = "D")
